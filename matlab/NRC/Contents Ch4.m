% ------------------------------- CHAPTER 4: LINEAR ALGEBRA -------------------------------
% Attendant to the text <a href="matlab:NRweb">Numerical Renaissance: simulation, optimization, & control</a>
% Files in Chapter 4 of <a href="matlab:help NRC">Numerical Renaissance Codebase 1.0</a>:
%   WireTest                   - function <a href="matlab:WireTest">WireTest</a>
%   Hessenberg                 - function [A,V] = Hessenberg(A)
%   HessenbergTest             - script <a href="matlab:HessenbergTest">HessenbergTest</a>
%   Roots                      - function x = Roots(a)
%   RootsTest                  - script <a href="matlab:RootsTest">RootsTest</a>
%   QRcgs                      - function [A,R] = QRcgs(A)
%   QRcgsTest                  - script <a href="matlab:QRcgsTest">QRcgsTest</a>
%   QRmgs                      - function [A,R,pi,r] = QRmgs(A)
%   QRmgsTest                  - script <a href="matlab:QRmgsTest">QRmgsTest</a>
%   QRHouseholder              - function [A,Q,pi,r] = QRHouseholder(A)
%   QRHouseholderTest          - script <a href="matlab:QRHouseholderTest">QRHouseholderTest</a>
%   QRGivensHessenberg         - function [A,Q] = QRGivensHessenberg(A)
%   QRGivensHessenbergTest     - script <a href="matlab:QRGivensHessenbergTest">QRGivensHessenbergTest</a>
%   QRGivensTridiag            - function [b,c,a,cc,ss] = QRGivensTridiag(a,b,c)
%   QRGivensTridiagTest        - script <a href="matlab:QRGivensTridiagTest">QRGivensTridiagTest</a>
%   QRFastGivensHessenberg     - function [A,Q] = QRFastGivensHessenberg(A) 
%   QRFastGivensHessenbergTest - script <a href="matlab:QRFastGivensHessenbergTest">QRFastGivensHessenbergTest</a>
%   ShiftedInversePower        - function [S,T] = ShiftedInversePower(A,mu)
%   ShiftedInversePowerTest    - script <a href="matlab:ShiftedInversePowerTest">ShiftedInversePowerTest</a>
%   EigGeneral                 - function [lam] = EigGeneral(A)
%   EigGeneralTest             - script <a href="matlab:EigGeneralTest">EigGeneralTest</a>
%   EigHermitian               - function [lam] = EigHermitian(A)
%   EigHermitianTest           - script <a href="matlab:EigHermitianTest">EigHermitianTest</a>
%   EigReal                    - function [lam] = EigReal(A)                            
%   EigRealTest                - script <a href="matlab:EigRealTest">EigRealTest</a>
%   Eig                        - function [lam,S]=Eig(S,type)
%   EigTest                    - script <a href="matlab:EigTest">EigTest</a>
%   Schur                      - function [U,T]=Schur(U,type)
%   SchurTest                  - script <a href="matlab:SchurTest">SchurTest</a>
%   Bidiagonalization          - function [A,U,V] = Bidiagonalization(A,m,n)
%   BidiagonalizationTest      - script <a href="matlab:BidiagonalizationTest">BidiagonalizationTest</a>
%   SVD                        - function [U,S,V,r] = SVD(A)
%   SVDTest                    - script <a href="matlab:SVDTest">SVDTest</a>
%   Cholesky                   - function [A] = Cholesky(A,n)
%   CholeskyTest               - script <a href="matlab:CholeskyTest">CholeskyTest</a>
%   CholeskyIncomplete         - function [A] = CholeskyIncomplete(A,n)
%   CholeskyIncompleteTest     - script <a href="matlab:CholeskyIncompleteTest">CholeskyIncompleteTest</a>
%   CALE                       - function X=CALE(A,Q)
%   CALEtest                   - script <a href="matlab:CALEtest">CALEtest</a>
%   Sylvester                  - function X=Sylvester(A,B,C,g,m,n)
%   SylvesterTest              - script <a href="matlab:SylvesterTest">SylvesterTest</a>
%   CARE                       - function X=CARE(A,S,Q)
%   CAREtest                   - script <a href="matlab:CAREtest">CAREtest</a>
%   DALE                       - function X=DALE(F,Q,n)
%   DALEtest                   - script <a href="matlab:DALEtest">DALEtest</a>
%   RDE                        - function X=RDE(X,F,S,Q,n,steps)
%   RDEtest                    - script <a href="matlab:RDEtest">RDEtest</a>
%   DARE                       - function X=DARE(F,S,Q,n)
%   DAREdoubling               - function X=DAREdoubling(F,S,Q,n,steps)
%   DAREtest                   - script <a href="matlab:DAREtest">DAREtest</a>
%   ReorderSchur               - function [U,T]=ReorderSchur(U,T,type,e)
%   ReorderSchurTest           - script <a href="matlab:ReorderSchurTest">ReorderSchurTest</a>
% <a href="matlab:help NRchap03"><-previous</a> ---------- please read the <a href="matlab:help NRcopyleft">copyleft</a>, and please <a href="matlab:help NRsupport">support</a> us! ----------- <a href="matlab:help NRchap05">next-></a>
